[{"/Users/bsharazhran/Documents/GitHub/cs-backend/csfrontend/src/index.js":"1","/Users/bsharazhran/Documents/GitHub/cs-backend/csfrontend/src/App.js":"2","/Users/bsharazhran/Documents/GitHub/cs-backend/csfrontend/src/data/store.js":"3","/Users/bsharazhran/Documents/GitHub/cs-backend/csfrontend/src/data/Global.js":"4","/Users/bsharazhran/Documents/GitHub/cs-backend/csfrontend/src/pages/ForgotPage.jsx":"5","/Users/bsharazhran/Documents/GitHub/cs-backend/csfrontend/src/pages/DashboardPage.jsx":"6","/Users/bsharazhran/Documents/GitHub/cs-backend/csfrontend/src/pages/SignUpPage.jsx":"7","/Users/bsharazhran/Documents/GitHub/cs-backend/csfrontend/src/pages/LogInPage.jsx":"8","/Users/bsharazhran/Documents/GitHub/cs-backend/csfrontend/src/pages/E404Page.jsx":"9","/Users/bsharazhran/Documents/GitHub/cs-backend/csfrontend/src/pages/ChangePassword.jsx":"10","/Users/bsharazhran/Documents/GitHub/cs-backend/csfrontend/src/pages/ActivateAccount.jsx":"11","/Users/bsharazhran/Documents/GitHub/cs-backend/csfrontend/src/API/API.js":"12","/Users/bsharazhran/Documents/GitHub/cs-backend/csfrontend/src/components/TemporaryAlert.jsx":"13","/Users/bsharazhran/Documents/GitHub/cs-backend/csfrontend/src/data/Consts.js":"14","/Users/bsharazhran/Documents/GitHub/cs-backend/csfrontend/src/components/Navbar.jsx":"15","/Users/bsharazhran/Documents/GitHub/cs-backend/csfrontend/src/components/BasicCard.jsx":"16","/Users/bsharazhran/Documents/GitHub/cs-backend/csfrontend/src/pages/PCsPage.jsx":"17","/Users/bsharazhran/Documents/GitHub/cs-backend/csfrontend/src/pages/PhonesPage.jsx":"18","/Users/bsharazhran/Documents/GitHub/cs-backend/csfrontend/src/pages/About.jsx":"19","/Users/bsharazhran/Documents/GitHub/cs-backend/csfrontend/src/components/CreditCard.jsx":"20"},{"size":776,"mtime":1613651001753,"results":"21","hashOfConfig":"22"},{"size":1939,"mtime":1613817385794,"results":"23","hashOfConfig":"22"},{"size":697,"mtime":1613410909184,"results":"24","hashOfConfig":"22"},{"size":648,"mtime":1613410909182,"results":"25","hashOfConfig":"22"},{"size":3395,"mtime":1613817349053,"results":"26","hashOfConfig":"22"},{"size":1973,"mtime":1613824009743,"results":"27","hashOfConfig":"22"},{"size":7644,"mtime":1613817369504,"results":"28","hashOfConfig":"22"},{"size":7070,"mtime":1613817108814,"results":"29","hashOfConfig":"22"},{"size":385,"mtime":1613817337723,"results":"30","hashOfConfig":"22"},{"size":6332,"mtime":1613817330045,"results":"31","hashOfConfig":"22"},{"size":1004,"mtime":1613817320660,"results":"32","hashOfConfig":"22"},{"size":2854,"mtime":1613500526771,"results":"33","hashOfConfig":"22"},{"size":803,"mtime":1613410909179,"results":"34","hashOfConfig":"22"},{"size":152,"mtime":1613415767786,"results":"35","hashOfConfig":"22"},{"size":1739,"mtime":1613817075487,"results":"36","hashOfConfig":"22"},{"size":657,"mtime":1613772963637,"results":"37","hashOfConfig":"22"},{"size":1202,"mtime":1613817357450,"results":"38","hashOfConfig":"22"},{"size":1225,"mtime":1613823936173,"results":"39","hashOfConfig":"22"},{"size":2575,"mtime":1613824873523,"results":"40","hashOfConfig":"22"},{"size":4326,"mtime":1613816539865,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"1kt3c47",{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"44"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"44"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"44"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"44"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"44"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"44"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"44"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"44"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"44"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"44"},"/Users/bsharazhran/Documents/GitHub/cs-backend/csfrontend/src/index.js",[],["93","94"],"/Users/bsharazhran/Documents/GitHub/cs-backend/csfrontend/src/App.js",["95"],"import React, {useEffect} from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\nimport {useSelector} from 'react-redux';\nimport LogInPage from './pages/LogInPage'\nimport SignUpPage from './pages/SignUpPage'\nimport DashboardPage from './pages/DashboardPage'\nimport PCsPage from './pages/PCsPage'\nimport PhonesPage from './pages/PhonesPage'\n\nimport ChangePassword from './pages/ChangePassword'\nimport E404Page from './pages/E404Page'\nimport ForgotPage from './pages/ForgotPage'\nimport ActivateAccount from './pages/ActivateAccount'\nimport About from './pages/About'\n\nimport Navbar from './components/Navbar'\nimport {currentUser} from './data/Global';\n\nfunction App() {\n  // const Login = useSelector(ShowLogIn);\n  // const isCoursesHidden = useSelector(ShowCourses);\n  const user = useSelector(currentUser);\n\n  useEffect(() => {\n    console.log(\"user\", user);\n  }, [])\n\n\n  return (\n    <Router>\n      <div className=\"App\">\n        <div className=\"body\">\n          \n          \n          <Navbar/>\n          <Switch>\n            <Route path=\"/\" exact component={LogInPage} />\n            <Route path=\"/ch/:id/:token\" exact component={ChangePassword} />\n            <Route path=\"/a/:id/:token\" exact component={ActivateAccount} />\n\n            <Route path=\"/404\" exact component={E404Page} />\n\n            <Route path=\"/sign-up\" exact component={SignUpPage} />\n            <Route path=\"/sign-in\" exact component={LogInPage} />\n            <Route path=\"/reset-password\" exact component={ForgotPage} />\n\n\n            <Route path=\"/dashboard\" exact component={DashboardPage}/>\n            <Route path=\"/pcs\" exact component={PCsPage} />\n            <Route path=\"/phones\" exact component={PhonesPage} />\n            <Route path=\"/about\" exact component={About} />\n\n            \n          </Switch>\n        </div>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","/Users/bsharazhran/Documents/GitHub/cs-backend/csfrontend/src/data/store.js",["96","97"],"import {configureStore, getDefaultMiddleware} from '@reduxjs/toolkit';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport {PersistGate} from 'redux-persist/integration/react';\n\nimport global from './Global';\nconst persistConfig = {\n  key: 'root',\n  version: 1,\n  storage,\n};\n\nconst persistedReducer = persistReducer(persistConfig, global);\n\nexport const store = configureStore({\n  reducer: persistedReducer,\n  middleware: getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n});\n","/Users/bsharazhran/Documents/GitHub/cs-backend/csfrontend/src/data/Global.js",[],"/Users/bsharazhran/Documents/GitHub/cs-backend/csfrontend/src/pages/ForgotPage.jsx",[],"/Users/bsharazhran/Documents/GitHub/cs-backend/csfrontend/src/pages/DashboardPage.jsx",[],"/Users/bsharazhran/Documents/GitHub/cs-backend/csfrontend/src/pages/SignUpPage.jsx",["98","99","100"],"import React, {useState, useRef} from 'react';\nimport {Player} from '@lottiefiles/react-lottie-player';\nimport TemporaryAlert from '../components/TemporaryAlert';\nimport {doesEmailExists, register, sendMail} from '../API/API';\nimport ReCaptcha from '@matt-block/react-recaptcha-v2';\nimport {SITE_KEY} from '../data/Consts';\nimport * as Yup from 'yup';\nimport {useFormik} from 'formik';\nimport {useHistory} from 'react-router-dom';\n\nvar sha256 = require ('js-sha256');\n\nexport default function SignUpPage () {\n  const [alertType, setAlertType] = useState ('');\n  const [alertHeading, setAlertHeading] = useState ('');\n  const [alertBody, setAlertBody] = useState ('');\n  const [isVerified, setIsVerified] = useState (false);\n  const history = useHistory ();\n  const onSignUpClick = () => {\n    history.push ('/sign-up');\n  };\n\n  const handleSubmit = ({fname, lname, email, password, promoCode}) => {\n    // check if already exists\n    doesEmailExists (email).then (res => {\n      if (res.data.length != 0) {\n        // user already exists\n        setAlertType ('warning');\n        setAlertHeading ('User Exists');\n        setAlertBody (\n          'There is already an account registered with this email!'\n        );\n        alertRef.current.showAlert ();\n      } else {\n        // register\n\n        register (\n          fname,\n          lname,\n          email,\n          sha256 (password),\n          promoCode\n        ).then (res => {\n          setAlertType ('success');\n          setAlertHeading ('Success');\n          setAlertBody ('Registeration has been completed successfully!');\n          alertRef.current.showAlert ();\n\n          // send activation mail\n\n          const userId = res.data.id;\n          const token = res.data.spare2;\n\n          const full =\n            window.location.protocol +\n            '//' +\n            window.location.hostname +\n            (window.location.port ? ':' + window.location.port : '');\n          const url = `${full}/a/${userId}/${token}`;\n\n          const to = email;\n          const subject = 'Activation Email';\n          const text = `Click on this link to activate your account: ${url}`;\n          const onSuccess = e => {};\n          sendMail (to, subject, text, onSuccess);\n          setAlertType ('success');\n          setAlertHeading ('Success');\n          setAlertBody ('Check your email for an activation link');\n        });\n      }\n    });\n  };\n\n  const onLogInClick = () => {\n    history.push ('/sign-in');\n  };\n  const alertRef = useRef ();\n\n  const formik = useFormik ({\n    initialValues: {\n      fname: '',\n      lname: '',\n      email: '',\n      password: '',\n      pass2: '',\n      promoCode: '',\n    },\n    validationSchema: Yup.object ({\n      fname: Yup.string ()\n        .max (15, 'Must be 15 characters or less')\n        .required ('Required'),\n      lname: Yup.string ()\n        .max (20, 'Must be 15 characters or less')\n        .required ('Required'),\n      email: Yup.string ()\n        .email ('Invalid email address')\n        .required ('Required'),\n\n      password: Yup.string ()\n        .required ('Password is required')\n        .matches (\n          /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/,\n          'Must Contain at least 8 Characters\\n One Uppercase, One Lowercase\\n One Number and one special\\n case Character'\n        ),\n\n      pass2: Yup.string ()\n        .oneOf ([Yup.ref ('password'), null], 'Passwords must match')\n        .required ('Required'),\n\n      promoCode: Yup.string (),\n    }),\n    onSubmit: values => {\n      handleSubmit (values);\n    },\n  });\n  return (\n    <form onSubmit={formik.handleSubmit}>\n      <Player\n        src=\"https://assets5.lottiefiles.com/packages/lf20_wd1udlcz.json\"\n        background=\"transparent\"\n        speed=\"1\"\n        loop\n        autoplay\n        style={{height: '300px', width: '300px'}}\n      />\n      <TemporaryAlert\n        body={alertBody}\n        heading={alertHeading}\n        type={alertType}\n        ref={alertRef}\n      />\n      <div className=\" d-flex flex-column align-items-md-center\">\n      <h2 className=\"m-5\">Sign Up</h2>\n\n        <div className=\"form-group\">\n          <input\n            className=\"form-control m-2\"\n            id=\"fname\"\n            name=\"fname\"\n            type=\"text\"\n            placeholder=\"First Name\"\n            {...formik.getFieldProps ('fname')}\n          />\n          {formik.touched.fname && formik.errors.fname\n            ? <div className=\"error ml-2\">{formik.errors.fname}</div>\n            : null}\n        </div>\n\n        <div className=\"form-group\">\n\n          <input\n            className=\"form-control m-2\"\n            id=\"lname\"\n            name=\"lname\"\n            type=\"text\"\n            placeholder=\"Last Name\"\n            {...formik.getFieldProps ('lname')}\n          />\n          {formik.touched.lname && formik.errors.lname\n            ? <div className=\"error ml-2\">{formik.errors.lname}</div>\n            : null}\n        </div>\n\n        <div className=\"form-group\">\n\n          <input\n            className=\"form-control m-2\"\n            id=\"email\"\n            name=\"email\"\n            type=\"email\"\n            placeholder=\"Email\"\n            {...formik.getFieldProps ('email')}\n          />\n          {formik.touched.email && formik.errors.email\n            ? <div className=\"error ml-2\">{formik.errors.email}</div>\n            : null}\n        </div>\n\n        <div className=\"form-group\">\n\n          <input\n            className=\"form-control m-2\"\n            id=\"password\"\n            name=\"password\"\n            type=\"password\"\n            placeholder=\"Password\"\n            {...formik.getFieldProps ('password')}\n          />\n        \n        </div>\n        <div className=\"shrink\">\n        {formik.touched.password && formik.errors.password\n            ? <p className=\"error ml-2\">{formik.errors.password}</p>\n            : null}\n        </div>\n        \n        <div className=\"form-group\">\n\n          <input\n            className=\"form-control m-2\"\n            id=\"pass2\"\n            name=\"pass2\"\n            type=\"password\"\n            placeholder=\"Repeat Password\"\n            {...formik.getFieldProps ('pass2')}\n          />\n          {formik.touched.pass2 && formik.errors.pass2\n            ? <div className=\"error ml-2\">{formik.errors.pass2}</div>\n            : null}\n        </div>\n\n        <div className=\"form-group\">\n\n          <input\n            className=\"form-control m-2\"\n            id=\"promoCode\"\n            name=\"promoCode\"\n            type=\"text\"\n            placeholder=\"Promo Code\"\n            {...formik.getFieldProps ('promoCode')}\n          />\n          {formik.touched.promoCode && formik.errors.promoCode\n            ? <div className=\"error ml-2\">{formik.errors.promoCode}</div>\n            : null}\n        </div>\n        <ReCaptcha\n          siteKey={SITE_KEY}\n          theme=\"light\"\n          size=\"normal\"\n          onSuccess={captcha => setIsVerified (true)}\n          onExpire={() => console.log ('Verification has expired, re-verify.')}\n          onError={() =>\n            console.log ('Something went wrong, check your conenction')}\n        />\n        <div className=\"form-group\">\n\n          <button\n            //disabled={!validateForm ()}\n            type=\"submit\"\n            className=\"btn btn-primary mt-3\"\n            disabled={!(formik.isValid && formik.dirty && isVerified)}\n          >\n            Sign Up\n          </button>\n\n          <div className=\"form-group mt-3\">\n            Already have an account? \n          <a className=\"mb-3 pointer\" size=\"m\" onClick={onLogInClick}>\n            {' '}Sign In\n          </a>\n        </div>\n        </div>\n\n      </div>\n    </form>\n  );\n}\n","/Users/bsharazhran/Documents/GitHub/cs-backend/csfrontend/src/pages/LogInPage.jsx",["101","102","103","104"],"import React, {useState, useEffect, useRef} from 'react';\nimport {Player} from '@lottiefiles/react-lottie-player';\nimport {Form, Button} from 'react-bootstrap';\nimport {useDispatch} from 'react-redux';\nimport {useHistory} from 'react-router-dom';\nimport {logIn, sendMail} from '../API/API';\nimport TemporaryAlert from '../components/TemporaryAlert';\nimport {setCurrentUser} from '../data/Global';\nimport ReCaptcha from '@matt-block/react-recaptcha-v2';\nimport {SITE_KEY} from '../data/Consts';\nimport {useCookies} from 'react-cookie';\nimport * as Yup from 'yup';\nimport {useFormik} from 'formik';\n\nvar sha256 = require ('js-sha256');\n\nexport default function LogInPage () {\n  const history = useHistory ();\n  const dispatch = useDispatch ();\n  const [cookies, setCookie] = useCookies (['user']);\n\n  const alertRef = useRef ();\n  const [alertHeading, setAlertHeading] = useState ('');\n  const [alertBody, setAlertBody] = useState ('');\n  const [alertType, setAlertType] = useState ('');\n\n  const [id, setId] = useState (-1);\n  const [spare2, setSpare2] = useState (-1);\n  const [rememberMe, setRememberMe] = useState (false);\n\n  const [isVerified, setIsVerified] = useState (false);\n\n  const [allowSendActivationLink, setAllowSendActivationLink] = useState (\n    false\n  );\n\n  useEffect (() => {\n    // auto login if user has been saved by remember me\n    if (cookies.user !== undefined) {\n      const email = cookies.user.email;\n      const password = cookies.user.password;\n      logIn (email, sha256 (password)).then (res => {\n        if (res.data.length != 0) {\n          setId (res.data.id);\n          setSpare2 (res.data.spare2);\n          if (res.data.spare2 === 'Activated') {\n            history.push ('/dashboard');\n            dispatch (setCurrentUser (res.data));\n          }\n        }\n      });\n    }\n  }, []);\n\n  const handleSubmit = ({email, password}) => {\n    logIn (email, sha256 (password)).then (res => {\n      if (res.data.length != 0) {\n        console.log ('user:', res.data);\n        setId (res.data.id);\n        setSpare2 (res.data.spare2);\n        if (res.data.spare2 === 'Activated') {\n          if (rememberMe) {\n            setCookie ('user', {email, password});\n          }\n          history.push ('/dashboard');\n          dispatch (setCurrentUser (res.data));\n        } else if (res.data.id != null) {\n          setAlertType ('info');\n\n          setAlertHeading ('Activate account');\n          setAlertBody ('Please check you email for an activation link.');\n          alertRef.current.showAlert ();\n          setAllowSendActivationLink (true);\n        }\n      } else {\n        setAlertType ('warning');\n\n        setAlertHeading ('Log in failed');\n        setAlertBody ('Password or email are not correct! try again.');\n        alertRef.current.showAlert ();\n      }\n    });\n  };\n\n  const onSignUpClick = () => {\n    history.push ('/sign-up');\n  };\n\n  const resendActivationLink = email => {\n    const userId = id;\n    const token = spare2;\n\n    const full =\n      window.location.protocol +\n      '//' +\n      window.location.hostname +\n      (window.location.port ? ':' + window.location.port : '');\n    const url = `${full}/a/${userId}/${token}`;\n\n    const to = email;\n    const subject = 'Activation Email';\n    const text = `Click on this link to activate your account: ${url}`;\n    const onSuccess = e => {};\n    sendMail (to, subject, text, onSuccess);\n    setAlertType ('success');\n    setAlertHeading ('Success');\n    setAlertBody ('Check your email for an activation link');\n    alertRef.current.showAlert ();\n  };\n\n  const formik = useFormik ({\n    initialValues: {\n      email: '',\n      password: '',\n    },\n    validationSchema: Yup.object ({\n      email: Yup.string ()\n        .email ('Invalid email address')\n        .required ('Required'),\n\n      password: Yup.string ().required ('Password is required'),\n    }),\n    onSubmit: values => {\n      handleSubmit (values);\n    },\n  });\n  return (\n    <form onSubmit={formik.handleSubmit}>\n      <Player\n        autoplay\n        loop\n        src=\"https://assets1.lottiefiles.com/datafiles/RvQQlJ3ODelSiQi/data.json\"\n        style={{height: '300px', width: '300px'}}\n      />\n      <TemporaryAlert\n        body={alertBody}\n        heading={alertHeading}\n        type={alertType}\n        ref={alertRef}\n      />\n      <div className=\" d-flex flex-column align-items-md-center\">\n\n        <h2 className=\"m-5\">Sign In</h2>\n        <div className=\"form-group\">\n\n          <input\n            className=\"form-control m-2\"\n            id=\"email\"\n            name=\"email\"\n            type=\"email\"\n            placeholder=\"Email\"\n            {...formik.getFieldProps ('email')}\n          />\n          {formik.touched.email && formik.errors.email\n            ? <div className=\"error ml-2\">{formik.errors.email}</div>\n            : null}\n        </div>\n\n        <div className=\"form-group\">\n\n          <input\n            className=\"form-control m-2\"\n            id=\"password\"\n            name=\"password\"\n            type=\"password\"\n            placeholder=\"Password\"\n            {...formik.getFieldProps ('password')}\n          />\n          {formik.touched.password && formik.errors.password\n            ? <div className=\"error ml-2\">{formik.errors.password}</div>\n            : null}\n        </div>\n\n        <Form.Group className=\"m-2\" controlId=\"formBasicCheckbox\">\n          <Form.Check\n            value={rememberMe}\n            onChange={e => setRememberMe (e.target.value)}\n            type=\"checkbox\"\n            label=\"Remember Me\"\n          />\n        </Form.Group>\n        <ReCaptcha\n          siteKey={SITE_KEY}\n          theme=\"light\"\n          size=\"normal\"\n          onSuccess={captcha => setIsVerified (true)}\n          onExpire={() => console.log ('Verification has expired, re-verify.')}\n          onError={() =>\n            console.log ('Something went wrong, check your conenction')}\n        />\n        <div className=\"form-group\">\n\n          <button\n            //disabled={!validateForm ()}\n            type=\"submit\"\n            className=\"btn btn-primary m-2\"\n            disabled={!(formik.isValid && formik.dirty && isVerified)}\n          >\n            Log In\n          </button>\n\n        </div>\n        <div className=\"form-group\">\n          Don't have an account?\n          <a className=\"mb-3 pointer\" size=\"m\" onClick={onSignUpClick}>\n            {' '}Sign Up\n          </a>\n        </div>\n\n        {allowSendActivationLink &&\n          <div className=\"d-flex flex-column align-items-md-center m-3\">\n\n            <p className=\"forgot-password text-right m-2\">\n              Didn't receive an activation link?\n            </p>\n            <Button\n              className=\"mb-3\"\n              //disabled={email.length == 0}\n              size=\"m\"\n              onClick={() => resendActivationLink (formik.values.email)}\n            >\n              Resend Activation Link\n            </Button>\n          </div>}\n        <p className=\"forgot-password text-right\">\n          <a href=\"/reset-password\">Forgot Password?</a>\n        </p>\n\n      </div>\n    </form>\n  );\n}\n","/Users/bsharazhran/Documents/GitHub/cs-backend/csfrontend/src/pages/E404Page.jsx",[],"/Users/bsharazhran/Documents/GitHub/cs-backend/csfrontend/src/pages/ChangePassword.jsx",["105","106"],"import React, {useEffect, useState, useRef} from 'react';\nimport {getUserSpare1, updatePasswordByToken, setUserSpare1} from '../API/API';\nimport TemporaryAlert from '../components/TemporaryAlert';\nimport {useHistory} from 'react-router-dom';\nimport ReCaptcha from '@matt-block/react-recaptcha-v2';\nimport {SITE_KEY} from '../data/Consts';\nimport * as Yup from 'yup';\nimport {useFormik} from 'formik';\nvar sha256 = require ('js-sha256');\n\nexport default function ChangePassword({match}) {\n  const alertRef = useRef ();\n  const history = useHistory ();\n\n  const [allow, setAllow] = useState (false);\n\n  const [alertType, setAlertType] = useState ('');\n  const [alertHeading, setAlertHeading] = useState ('');\n  const [alertBody, setAlertBody] = useState ('');\n  const [isVerified, setIsVerified] = useState (false);\n\n  useEffect (() => {\n    let userId = match.params.id;\n    let userToken = match.params.token;\n    console.log (match);\n    getUserSpare1 (userId).then (res => {\n      if (res.data) {\n        let token = res.data.spare1;\n        if (token === userToken) {\n          // token is valid\n          setAllow (true);\n        } else {\n          setAllow (false);\n          history.push ('/404');\n        }\n      }\n    });\n  }, []);\n\n  const handleSubmit = ({password}) => {\n\n    let userId = match.params.id;\n    let userToken = match.params.token;\n\n    updatePasswordByToken (userId, userToken, sha256 (password)).then (res => {\n      if (res.data == 1) {\n        // password changed\n        setAlertType ('success');\n        setAlertHeading ('Success');\n        setAlertBody ('Password has been changed successfuly!');\n        alertRef.current.showAlert ();\n        setAllow (false);\n        // delete token\n        setUserSpare1 (userId, null).then (res => {\n          setTimeout (() => {\n            // redirect to log in\n            history.push ('/sign-in');\n          }, 1000);\n        });\n      } else {\n        // password didn't change\n        setAlertType ('warning');\n        setAlertHeading ('Error');\n        setAlertBody ('Ops, something went wrong!!');\n        alertRef.current.showAlert ();\n      }\n    });\n  };\n\n  const formik = useFormik ({\n    initialValues: {\n      password: '',\n      pass2: '',\n    },\n    validationSchema: Yup.object ({\n      password: Yup.string ()\n        .required ('Password is required')\n        .matches (\n          /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/,\n          'Must Contain at least 8 Characters, One Uppercase, One Lowercase, One Number and one special case Character'\n        ),\n\n      pass2: Yup.string ()\n        .oneOf ([Yup.ref ('password'), null], 'Passwords must match')\n        .required ('Required'),\n    }),\n    onSubmit: values => {\n      handleSubmit (values);\n    },\n  });\n  return (\n    <form onSubmit={formik.handleSubmit}>\n\n      <TemporaryAlert\n        body={alertBody}\n        heading={alertHeading}\n        type={alertType}\n        ref={alertRef}\n      />\n      {allow &&\n        <div className=\" d-flex flex-column align-items-md-center\">\n      <h2 className=\"m-5\">Change Password</h2>\n\n          <div className=\"form-group\">\n\n            <input\n              className=\"form-control m-2\"\n              id=\"password\"\n              name=\"password\"\n              type=\"password\"\n              placeholder=\"Password\"\n              {...formik.getFieldProps ('password')}\n            />\n            {formik.touched.password && formik.errors.password\n              ? <div className=\"error ml-2\">{formik.errors.password}</div>\n              : null}\n          </div>\n\n          <div className=\"form-group\">\n\n            <input\n              className=\"form-control m-2\"\n              id=\"pass2\"\n              name=\"pass2\"\n              type=\"password\"\n              placeholder=\"Repeat Password\"\n              {...formik.getFieldProps ('pass2')}\n            />\n            {formik.touched.pass2 && formik.errors.pass2\n              ? <div className=\"error ml-2\">{formik.errors.pass2}</div>\n              : null}\n          </div>\n\n          <ReCaptcha\n            siteKey={SITE_KEY}\n            theme=\"light\"\n            size=\"normal\"\n            onSuccess={captcha => setIsVerified (true)}\n            onExpire={() =>\n              console.log ('Verification has expired, re-verify.')}\n            onError={() =>\n              console.log ('Something went wrong, check your conenction')}\n          />\n          <div className=\"form-group\">\n\n            <button\n              type=\"submit\"\n              className=\"btn btn-primary mt-3\"\n              disabled={!(formik.isValid && formik.dirty && isVerified)}\n            >\n              Change Password\n            </button>\n          </div>\n\n        </div>}\n\n    </form>\n  );\n}\n\n//   return (\n//     <div>\n//       <form onSubmit={handleSubmit}>\n\n//         <TemporaryAlert\n//           body={alertBody}\n//           heading={alertHeading}\n//           type={alertType}\n//           ref={alertRef}\n//         />\n\n//         {allow &&\n//           <div>\n\n//             <div className=\" d-flex flex-column align-items-md-center\">\n//               <h3 className=\"mt-5 mb-5\">Change Password</h3>\n\n//               <div className=\"form-group\">\n//                 <SmartPasswordInput\n//                   onValChange={e => setPassword (e)}\n//                   onErrorChange={err => setPasswordError (err)}\n//                   onValChangeConfirm={e => setRepeatedPassword (e)}\n//                   onErrorChangeConfirm={err => setPasswordConfirmError (err)}\n//                 />\n//               </div>\n\n//               <ReCaptcha\n//                 siteKey={SITE_KEY}\n//                 theme=\"light\"\n//                 size=\"normal\"\n//                 onSuccess={captcha => setIsVerified (true)}\n//                 onExpire={() =>\n//                   console.log ('Verification has expired, re-verify.')}\n//                 onError={() =>\n//                   console.log ('Something went wrong, check your conenction')}\n//               />\n//               <button\n//                 disabled={!validateForm ()}\n//                 type=\"submit\"\n//                 className=\"btn btn-primary mt-3\"\n//               >\n//                 Change Password\n//               </button>\n//             </div>\n\n//           </div>}\n\n//       </form>       {' '}\n//     </div>\n//   );\n// }\n","/Users/bsharazhran/Documents/GitHub/cs-backend/csfrontend/src/pages/ActivateAccount.jsx",["107"],"import React, {useEffect, useState} from 'react';\nimport {getUserSpare2, setUserSpare2} from '../API/API';\nimport {useHistory} from 'react-router-dom';\n\nexport default function ActivateAccount({match}) {\n  const history = useHistory ();\n  const [allow, setAllow] = useState (false);\n\n  useEffect (() => {\n    let userId = match.params.id;\n    let userToken = match.params.token;\n    console.log(userId, userToken);\n\n    getUserSpare2 (userId).then (res => {\n      if (res.data) {\n        let token = res.data.spare2;\n        console.log(token, userToken);\n        if (token === userToken) {\n          setUserSpare2 (userId, 'Activated').then (res => {\n            setAllow (true);\n            setTimeout (() => {\n              history.push ('/sign-in');\n            }, 2000);\n          });\n        } else {\n          setAllow (false);\n          history.push ('/404');\n        }\n      }\n    });\n  }, []);\n\n  return (\n    <div>\n      {allow && <h3>Account activated, redirecting...</h3>}\n    </div>\n  );\n}\n","/Users/bsharazhran/Documents/GitHub/cs-backend/csfrontend/src/API/API.js",["108"],"const axios = require ('axios');\nconst nodemailer = require ('nodemailer');\n\nexport const API_URL = '';\nexport const logIn = async (email, password) => {\n  try {\n    return await axios\n      .get (API_URL + `/users/${email}/${password}`)\n      .then (res => {\n        return res;\n      });\n  } catch (error) {\n    console.error (error);\n  }\n};\n\nexport const doesEmailExists = async email => {\n  try {\n    return await axios.get (API_URL + `/users/${email}`).then (res => {\n      return res;\n    });\n  } catch (error) {\n    console.error (error);\n  }\n};\n\nexport const register = async (\n  fname,\n  lname,\n  email,\n  password,\n  promoCode = ''\n) => {\n  try {\n    return await axios\n      .post (API_URL + `/users`, {\n        name: fname,\n        family_name: lname,\n        email,\n        promo_code: promoCode,\n        password,\n      })\n      .then (res => {\n        return res;\n      });\n  } catch (error) {\n    console.error (error);\n  }\n};\n\nexport const sendMail = async (to, subject, text) => {\n  try {\n    return await axios\n      .post (API_URL + `/sendMail`, {\n        to,\n        subject,\n        text,\n      })\n      .then (res => {\n        return res;\n      });\n  } catch (error) {\n    console.error (error);\n  }\n};\n\nexport const getUserSpare1 = async id => {\n  try {\n    return await axios.get (API_URL + `/spare1/${id}`).then (res => {\n      return res;\n    });\n  } catch (error) {\n    console.error (error);\n  }\n};\nexport const setUserSpare1 = async (id, spare1) => {\n  try {\n    return await axios.put (API_URL + `/spare1`, {id, spare1}).then (res => {\n      return res;\n    });\n  } catch (error) {\n    console.error (error);\n  }\n};\n\n\nexport const getUserSpare2 = async id => {\n  try {\n    return await axios.get (API_URL + `/spare2/${id}`).then (res => {\n      return res;\n    });\n  } catch (error) {\n    console.error (error);\n  }\n};\nexport const setUserSpare2 = async (id, spare2) => {\n  try {\n    return await axios.put (API_URL + `/spare2`, {id, spare2}).then (res => {\n      return res;\n    });\n  } catch (error) {\n    console.error (error);\n  }\n};\n\n\n\nexport const setUserSpare1byEmail = async (email, spare1) => {\n  try {\n    return await axios.put (API_URL + `/spare1email`, {email, spare1}).then (res => {\n      return res;\n    });\n  } catch (error) {\n    console.error (error);\n  }\n};\nexport const generateUserSpare1ByEmail = async (email) => {\n  try {\n    return await axios.put (API_URL + `/spare1email`, {email}).then (res => {\n      return res;\n    });\n  } catch (error) {\n    console.error (error);\n  }\n};\nexport const updatePasswordByToken = async (id, spare1, newPassword) => {\n  try {\n    return await axios\n      .put (API_URL + `/updatePasswordByToken`, {\n        id,\n        spare1,\n        newPassword,\n      })\n      .then (res => {\n        return res;\n      });\n  } catch (error) {\n    console.error (error);\n  }\n};\n","/Users/bsharazhran/Documents/GitHub/cs-backend/csfrontend/src/components/TemporaryAlert.jsx",["109"],"import React, {\n  useEffect,\n  useState,\n  forwardRef,\n  useImperativeHandle,\n} from 'react';\nimport {Alert} from 'react-bootstrap';\nvar timeout = null;\nconst TemporaryAlert = (\n  {body, heading, type = 'success', showTime = 5000},\n  ref\n) => {\n  const [show, setShow] = useState(false);\n \n  useImperativeHandle(ref, () => ({\n    showAlert: () => {\n      setShow(true);\n      clearTimeout(timeout)\n      timeout = setTimeout(() => {\n        closeAlert();\n      }, showTime);\n    },\n  }));\n\n  const closeAlert = () => {\n    setShow(false);\n  };\n  return (\n    <>\n      {show && (\n        <Alert variant={type} onClose={closeAlert} dismissible>\n          <Alert.Heading>{heading}</Alert.Heading>\n          <p>{body}</p>\n        </Alert>\n      )}\n    </>\n  );\n};\nexport default forwardRef(TemporaryAlert);\n","/Users/bsharazhran/Documents/GitHub/cs-backend/csfrontend/src/data/Consts.js",[],"/Users/bsharazhran/Documents/GitHub/cs-backend/csfrontend/src/components/Navbar.jsx",["110","111","112","113","114"],"import React from 'react';\nimport {Navbar, Nav} from 'react-bootstrap';\nimport {Icon, InlineIcon} from '@iconify/react';\nimport {connect, useSelector} from 'react-redux';\nimport {useDispatch} from 'react-redux';\nimport {currentUser, setCurrentUser} from '../data/Global';\nimport {useHistory} from 'react-router-dom';\nimport {useCookies} from 'react-cookie';\n\nexport default function Navbar2(props) {\n  const dispatch = useDispatch();\n  const user = useSelector(currentUser);\n  const history = useHistory ();\n  const [cookies, setCookie, removeCookie] = useCookies([\"user\"]);\n\n  const onLogOut = () => {\n    dispatch(setCurrentUser(null));\n    removeCookie(\"user\");\n  };\n\n  const onMainPageClick = () => {\n    history.push ('/dashboard');\n\n  }\n  return (\n    <>\n    {user && <Navbar\n        collapseOnSelect\n        sticky=\"top\"\n        expand=\"lg\"\n        className=\"navbarc myNavBar shadow\"\n      >\n        <Navbar.Brand onClick={onMainPageClick} className=\"pointer\" id=\"gradingSystem\">Hasob <span className=\"navbar-username\">{user && `${user.name} ${user.family_name}`}</span></Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n        <Navbar.Collapse id=\"responsive-navbar-nav\">\n          <Nav className=\"mr-auto\">\n            <Nav.Link href=\"/phones\">Cellphones</Nav.Link>\n            <Nav.Link href=\"/pcs\">PCs</Nav.Link>\n            {/* <Nav.Link href=\"/tvs\">TVs</Nav.Link> */}\n          </Nav>\n          <Nav>\n          <Nav.Link href=\"/about\">Info</Nav.Link>\n            <Nav.Link\n              eventKey={2}\n              onClick={onLogOut}\n              href=\"/sign-in\">\n                Log Out\n            </Nav.Link>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>}\n      \n    </>\n  );\n}\n","/Users/bsharazhran/Documents/GitHub/cs-backend/csfrontend/src/components/BasicCard.jsx",[],"/Users/bsharazhran/Documents/GitHub/cs-backend/csfrontend/src/pages/PCsPage.jsx",[],"/Users/bsharazhran/Documents/GitHub/cs-backend/csfrontend/src/pages/PhonesPage.jsx",[],"/Users/bsharazhran/Documents/GitHub/cs-backend/csfrontend/src/pages/About.jsx",["115"],"/Users/bsharazhran/Documents/GitHub/cs-backend/csfrontend/src/components/CreditCard.jsx",["116"],"import React, {useState} from 'react';\nimport Cards from 'react-credit-cards';\nimport * as Yup from 'yup';\nimport {useFormik} from 'formik';\nimport Spinner from 'react-bootstrap/Spinner';\nimport 'react-credit-cards/es/styles-compiled.css';\n\nexport default function CreditCard ({onSuccess}) {\n  const [focus, setFocus] = useState ('');\n\n  const [buttonTitle, setButtonTitle] = useState ('Confirm Payment');\n  const onPaymentPress = () => {\n    \n    if (buttonTitle === \"Success\") {\n        onSuccess()\n    }else{\n        setButtonTitle ('Proccessing');\n\n        setTimeout (() => {\n          setButtonTitle ('Success');\n        }, 2000);\n    }\n    \n    \n  };\n  const handleInputFocus = e => {\n    setFocus (e.target.name);\n  };\n\n  const formik = useFormik ({\n    initialValues: {\n      cvc: '',\n      expiry: '',\n      name: '',\n      number: '4',\n    },\n    validationSchema: Yup.object ({\n      cvc: Yup.string ()\n        .max (3, 'Must be exactly 3')\n        .min (3, 'Must be exactly 3')\n        .required ('Required'),\n      expiry: Yup.string ()\n        .max (4, 'Must be exactly 4')\n        .min (4, 'Must be exactly 4')\n        .required ('Required'),\n      name: Yup.string ().required ('Required'),\n\n      number: Yup.string ()\n        .required ('Numbers required')\n        .min (16, 'Must be exactly 16')\n        .max (16, 'Must be exactly 16'),\n    }),\n    onSubmit: values => {\n      onPaymentPress ();\n    },\n  });\n  return (\n    <form\n      className=\"d-flex flex-row justify-content-center\"\n      onSubmit={formik.handleSubmit}\n    >\n      <Cards\n        cvc={formik.values.cvc}\n        expiry={formik.values.expiry}\n        focused={focus}\n        name={formik.values.name}\n        number={formik.values.number}\n        \n      />\n      <div className=\" d-flex flex-column align-items-md-center ml-5\">\n\n        <div className=\"form-group w-100\">\n          <input\n            className=\"form-control m-2\"\n            id=\"number\"\n            name=\"number\"\n            type=\"number\"\n            placeholder=\"Number\"\n            {...formik.getFieldProps ('number')}\n            onFocus={handleInputFocus}\n          />\n          {formik.touched.number && formik.errors.number\n            ? <div className=\"error ml-2\">{formik.errors.number}</div>\n            : null}\n        </div>\n\n        <div className=\"form-group w-100\">\n          <input\n            className=\"form-control m-2\"\n            id=\"name\"\n            name=\"name\"\n            type=\"text\"\n            placeholder=\"Name\"\n            {...formik.getFieldProps ('name')}\n            onFocus={handleInputFocus}\n          />\n          {formik.touched.name && formik.errors.name\n            ? <div className=\"error ml-2\">{formik.errors.name}</div>\n            : null}\n        </div>\n\n        <div className=\"d-flex flex-row\">\n          <div className=\"form-group w-100\">\n\n            <input\n              className=\"form-control m-2\"\n              id=\"expiry\"\n              name=\"expiry\"\n              type=\"number\"\n              pattern=\"\\d\\d/\\d\\d\"\n\n              placeholder=\"Expiry date\"\n              {...formik.getFieldProps ('expiry')}\n              onFocus={handleInputFocus}\n            />\n            {formik.touched.expiry && formik.errors.expiry\n              ? <p className=\"error ml-2\">{formik.errors.expiry}</p>\n              : null}\n          </div>\n\n          <div className=\"form-group w-100 ml-2 \">\n            <input\n              className=\"form-control m-2\"\n              id=\"cvc\"\n              name=\"cvc\"\n              type=\"number\"\n              placeholder=\"CVC\"\n              {...formik.getFieldProps ('cvc')}\n              onFocus={handleInputFocus}\n            />\n            {formik.touched.cvc && formik.errors.cvc\n              ? <div className=\"error ml-2\">{formik.errors.cvc}</div>\n              : null}\n          </div>\n        </div>\n\n        <div className=\"form-group\">\n\n          <button\n            //disabled={!validateForm ()}\n            type=\"submit\"\n            className={`btn btn-${buttonTitle !== 'Success' ? 'primary' : 'success'} mt-3`}\n            disabled={!(formik.isValid && formik.dirty)}\n          >\n            {buttonTitle == 'Proccessing' &&\n              <Spinner animation=\"border\" variant=\"light\" />}\n\n            {buttonTitle}\n          </button>\n\n        </div>\n\n      </div>\n    </form>\n  );\n}\n",{"ruleId":"117","replacedBy":"118"},{"ruleId":"119","replacedBy":"120"},{"ruleId":"121","severity":1,"message":"122","line":27,"column":6,"nodeType":"123","endLine":27,"endColumn":8,"suggestions":"124"},{"ruleId":"125","severity":1,"message":"126","line":3,"column":3,"nodeType":"127","messageId":"128","endLine":3,"endColumn":15},{"ruleId":"125","severity":1,"message":"129","line":13,"column":9,"nodeType":"127","messageId":"128","endLine":13,"endColumn":20},{"ruleId":"125","severity":1,"message":"130","line":19,"column":9,"nodeType":"127","messageId":"128","endLine":19,"endColumn":22},{"ruleId":"131","severity":1,"message":"132","line":26,"column":27,"nodeType":"133","messageId":"134","endLine":26,"endColumn":29},{"ruleId":"135","severity":1,"message":"136","line":248,"column":11,"nodeType":"137","endLine":248,"endColumn":71},{"ruleId":"131","severity":1,"message":"132","line":43,"column":29,"nodeType":"133","messageId":"134","endLine":43,"endColumn":31},{"ruleId":"121","severity":1,"message":"138","line":53,"column":6,"nodeType":"123","endLine":53,"endColumn":8,"suggestions":"139"},{"ruleId":"131","severity":1,"message":"132","line":57,"column":27,"nodeType":"133","messageId":"134","endLine":57,"endColumn":29},{"ruleId":"135","severity":1,"message":"136","line":205,"column":11,"nodeType":"137","endLine":205,"endColumn":72},{"ruleId":"121","severity":1,"message":"140","line":38,"column":6,"nodeType":"123","endLine":38,"endColumn":8,"suggestions":"141"},{"ruleId":"131","severity":1,"message":"142","line":46,"column":20,"nodeType":"133","messageId":"134","endLine":46,"endColumn":22},{"ruleId":"121","severity":1,"message":"143","line":31,"column":6,"nodeType":"123","endLine":31,"endColumn":8,"suggestions":"144"},{"ruleId":"125","severity":1,"message":"145","line":2,"column":7,"nodeType":"127","messageId":"128","endLine":2,"endColumn":17},{"ruleId":"125","severity":1,"message":"146","line":2,"column":3,"nodeType":"127","messageId":"128","endLine":2,"endColumn":12},{"ruleId":"125","severity":1,"message":"147","line":3,"column":9,"nodeType":"127","messageId":"128","endLine":3,"endColumn":13},{"ruleId":"125","severity":1,"message":"148","line":3,"column":15,"nodeType":"127","messageId":"128","endLine":3,"endColumn":25},{"ruleId":"125","severity":1,"message":"149","line":4,"column":9,"nodeType":"127","messageId":"128","endLine":4,"endColumn":16},{"ruleId":"125","severity":1,"message":"150","line":14,"column":10,"nodeType":"127","messageId":"128","endLine":14,"endColumn":17},{"ruleId":"125","severity":1,"message":"151","line":14,"column":19,"nodeType":"127","messageId":"128","endLine":14,"endColumn":28},{"ruleId":"135","severity":1,"message":"136","line":58,"column":9,"nodeType":"137","endLine":58,"endColumn":42},{"ruleId":"131","severity":1,"message":"142","line":145,"column":26,"nodeType":"133","messageId":"134","endLine":145,"endColumn":28},"no-native-reassign",["152"],"no-negated-in-lhs",["153"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'user'. Either include it or remove the dependency array.","ArrayExpression",["154"],"no-unused-vars","'persistStore' is defined but never used.","Identifier","unusedVar","'PersistGate' is defined but never used.","'onSignUpClick' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","React Hook useEffect has missing dependencies: 'cookies.user', 'dispatch', and 'history'. Either include them or remove the dependency array.",["155"],"React Hook useEffect has missing dependencies: 'history' and 'match'. Either include them or remove the dependency array.",["156"],"Expected '===' and instead saw '=='.","React Hook useEffect has missing dependencies: 'history', 'match.params.id', and 'match.params.token'. Either include them or remove the dependency array.",["157"],"'nodemailer' is assigned a value but never used.","'useEffect' is defined but never used.","'Icon' is defined but never used.","'InlineIcon' is defined but never used.","'connect' is defined but never used.","'cookies' is assigned a value but never used.","'setCookie' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"158","fix":"159"},{"desc":"160","fix":"161"},{"desc":"162","fix":"163"},{"desc":"164","fix":"165"},"Update the dependencies array to be: [user]",{"range":"166","text":"167"},"Update the dependencies array to be: [cookies.user, dispatch, history]",{"range":"168","text":"169"},"Update the dependencies array to be: [history, match]",{"range":"170","text":"171"},"Update the dependencies array to be: [history, match.params.id, match.params.token]",{"range":"172","text":"173"},[943,945],"[user]",[1818,1820],"[cookies.user, dispatch, history]",[1235,1237],"[history, match]",[899,901],"[history, match.params.id, match.params.token]"]